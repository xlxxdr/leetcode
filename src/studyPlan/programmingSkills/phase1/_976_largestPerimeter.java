package studyPlan.programmingSkills.phase1;

import tools.Asserts;

import java.util.Arrays;

public class _976_largestPerimeter extends Asserts {

    public static void main(String[] args) {
        _976_largestPerimeter app = new _976_largestPerimeter();
        equals(5, app.largestPerimeter(getIntArray(2, 1, 2)));
        equals(0, app.largestPerimeter(getIntArray(1, 2, 1)));
        equals(2987682, app.largestPerimeter(getIntArray("[678079,825701,342019,742453,948352,480280,930477,401834,707920,314765,962614,596838,448841,566078,777367,29424,772119,847264,750369,21355,659119,549327,173908,180752,637846,775790,608207,164690,522775,776332,737808,965919,87346,98408,281518,575479,430324,258649,576422,640180,417246,2237,101377,376000,706805,821311,959783,97615,440830,713356,811431,9621,562992,813702,415448,235408,776857,614630,10968,500771,590958,698665,743030,670364,797892,154169,784742,530254,656323,329514,871912,93156,272775,292843,117992,361054,606909,868378,116965,327457,547017,419006,224125,37365,231161,313809,816263,83831,545215,200934,711607,614735,458413,351107,291860,347290,228489,501159,722411,375220,494372,179691,788244,319625,614459,379086,303092,928161,230855,459126,58459,556111,969567,173203,17457,460858,704803,765210,912217,393592,107652,12095,954137,92786,965694,495377,686015,602586,502390,893394,213750,901548,102146,280338,409535,671629,499639,494989,13594,171144,890524,868369,67349,281050,534653,854692,255542,382415,561955,521045,228714,95650,78662,567963,423631,427306,423231,421322,313657,591140,629744,430017,240071,342426,223559,213377,74577,693293,952774,979036,438354,381483,414711,395720,362078,947362,530021,740207,132978,808767,693123,47284,445512,952807,794292,195905,247499,637968,449551,29715,241150,556806,94506,284953,357344,907863,91603,536272,407930,364445,327868,124437,333283,816159,709613,927399,455649,546664,584678,954620,10032,367380,494041,480067,981352,992753,171588,512740,221505,884612,312121,816741,747663,41328,656883,50384,612028,566600,475230,519554,975060,119395,71682,916368,135885,869502,437865,984168,535780,684995,150637,757686,516653,881591,572362,148430,642219,516921,550304,199298,897360,750738,724516,455274,480879,45167,579232,52463,822435,71764,6399,438965,838082,710909,884969,362611,283639,715225,393367,858706,299711,993044,992425,256872,523477,351325,501850,945752,297699,394188,134968,521587,409848,825297,326266,99123,723838,173755,300143,73950,953537,609054,127022,803099,170543,868583,191060,749092,705507,761460,410800,39477,846227,35223,928791,934723,326378,729487,302351,640112,651937,868446,506759,4614,570299,770367,504572,335265,702604,350103,133647,410657,600186,150037,967888,741186,369916,404799,682473,397679,654706,521119,746360,314037,171880,796541,288167,195466,472851,154460,331896,253724,886263,593406,46751,248428,340498,565136,203634,281691,575622,362607,683376,418203,294529,840317,503633,672046,727296,434679,931911,831317,227313,582915,165532,167712,818069,110160,753336,217422,640640,7955,519078,109127,594362,337408,429486,170104,326155,66198,56563,871114,703538,546420,278381,651939,412224,918215,71802,825623,902188,265272,325261,885995,554758,581744,272741,995288,273365,279072,806727,221241,775974,735081,522461,723718,949424,753545,67627,755895,529083,536893,388224,165013,906582,75969,305463,706973,845983,891456,340205,659030,60466,36431,819779,143686,131940,798392,485788,424372,156541,842490,209522,314976,115250,521615,950074,880841,740754,51062,275204,190,295199,259697,389235,52255,650655,888471,843745,702552,968694,537181,429308,282279,827931,519935,721592,823770,547402,427562,745475,67100,399714,876613,979791,13234,371189,426910,384970,381778,448860,649441,830093,755764,51665,169823,693592,805806,518429,264542,474943,472103,839152,662132,446931,458149,203894,632981,335107,155635,709925,295761,843460,13075,509962,308517,195301,641369,728546,100947,267859,168378,106857,858047,199956,634717,329263,818913,838066,627729,350936,705095,142637,225450,255848,446141,792507,719859,199423,719949,593792,747369,229693,402006,258255,514593,423423,228091,269570,591267,169101,967294,713028,376889,936323,353607,485814,482215,378707,779496,12919,118699,737009,576178,38750,933344,244963,572033,764134,45630,476079,285031,781113,497944,457385,333977,155765,698279,611360,839685,131663,369417,336379,458591,507048,358413,223338,611597,586354,514149,307569,611793,620927,146100,329251,231361,500570,665561,496023,913080,702160,485374,790848,69423,286256,124540,709719,805881,200554,950613,849770,629308,40478,814241,427930,777286,452703,412262,65480,451200,624200,427041,240928,615241,347882,279005,805250,864575,724465,518701,958784,872944,437253,73086,801993,551062,764584,944836,320699,418319,807600,135840,76050,939585,463113,900717,120583,484922,493902,792454,416387,479029,916193,871582,879932,949626,857624,675389,416951,17295,725510,523171,452974,933550,466191,209474,683282,964265,454573,354415,556701,108785,426702,435454,787979,536069,225235,380865,760612,930303,409797,92459,992522,312488,572404,882573,100617,909271,526136,229391,958741,137908,155869,109046,110928,982725,972567,954302,343220,443258,798232,696258,702684,212459,438452,636848,6624,933796,989832,768530,458166,460438,627043,301945,574231,490822,775517,942428,80266,299619,230150,739039,423340,486138,620590,582583,765698,212749,35006,764545,669514,346462,905450,506270,937414,879925,250694,829161,827239,596585,964689,106694,573511,62962,650943,88504,78108,481123,666599,893652,298345,841351,320175,358571,993453,730874,293800,275617,961630,750425,998941,983497,476406,747900,334450,922643,304977,448590,818049,307328,946247,735288,296989,851553,707081,351495,666811,194825,62932,830758,433449,564113,152412,367973,164795,876539,327603,825539,891028,304919,318837,632914,409800,884889,195961,860994,151133,125743,62088,851145,529896,376823,87223,220297,179988,166928,382210,51458,32994,10696,392890,572594,749319,645310,731334,98231,309264,594970,638975,329279,694648,370122,583949,478633,404598,755114,38365,491309,732061,654679,112723,539394,633698,787011,711372,162173,664538,638474,842185,472292,609837,885694,122555,476254,391372,693111,853008,116409,100422,384246,59066,130788,664516,470369,535189,358964,964278,157013,889648,142714,124339,377999,667096,411586,607333,225169,767942,390813,110966,624958,336762,418453,536239,971507,986817,375600,440784,253468,113659,626967,864045,791486,523794,477755,258177,763203,917812,204841,394717,407735,535308,200167,851498,872901,967403,390726,642534,681013,245216,548026,916831,541155,52275,488238,787247,377566,336405,33409,950704,251872,554373,908468,907605,285243,640485,789697,83830,657831,660978,112937,340215,570370,209680,2817,856382,497297,892724,155765,3826,258980,637823,456025,668711,10756,975553,578478,224949,592380,35970,956652,356194,382718,440096,652732,346179,347145,466551,939873,931232,163553,70950,793126,212898,540099,22877,45449,204237,83154,361772,380613,226019,401974,209056,296356,223268,981714,604172,898065,510679,228743,992221,205761,842420,604292,267095,918572,438867,251437,161014,381383,970535,310496,188310,803393,61674,241852,557302,719776,157527,524815,546078,191694,20137,681535,531510,449257,617043,150102,665959,411140,406103,319648,161773,790526,866187,610853,532315,352061,928671,651766,514933,111027,594903,553459,824976,821882,539895,730642,403016,684326]")));

    }


    public int largestPerimeter(int[] nums) {
        // 三个数三个数来
        int max = 0;
        for (int i = 0; i < nums.length - 2; i ++) {
            int nI = nums[i];
            int nJ = nums[i + 1];
            int nK = nums[i + 2];
            if ((nI + nJ) > nK && (nI + nK) > nJ && (nJ + nK) > nI
                    && (nI - nJ) < nK && (nI - nK) < nJ && (nJ - nK) < nI) {
                int perimeter = nI + nJ + nK;
                if (perimeter > max) {
                    max = perimeter;
                }
            }

        }
        return max;
    }

    public int largestPerimeter1(int[] nums) {
        // 暴力法
        int max = 0;
        for (int i = 0; i < nums.length; i++) {
            for (int j = 0; j != i && j < nums.length; j++) {
                for (int k = 0; k != j && k < nums.length; k++) {
                    int nI = nums[i];
                    int nJ = nums[j];
                    int nK = nums[k];
                    if ((nI + nJ) > nK && (nI + nK) > nJ && (nJ + nK) > nI
                            && (nI - nJ) < nK && (nI - nK) < nJ && (nJ - nK) < nI) {
                        int perimeter = nI + nJ + nK;
                        if (perimeter > max) {
                            max = perimeter;
                        }
                    }
                }
            }
        }
        return max;

    }

}
